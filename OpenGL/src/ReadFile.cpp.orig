
#include "../include/ReadFile.h"
#include "../include/comm.h"
#include "../include/log.h"
#include "../include/math3d.h"
#include "../include/mesh.h"
#include "SOIL2/SOIL2.h"
#include <iostream>
#include <istream>
#include <sstream>
#include <gl/glew.h>

#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>

#include <fstream>

bool loadOBJ(const char * path,
	std::vector < glm::vec3 > & out_vertices,
	std::vector < glm::vec2 > & out_uvs,
	std::vector < glm::vec3 > & out_normals)
{
	printf("Loading OBJ file %s...\n", path);

	std::vector<unsigned int> vertexIndices, uvIndices, normalIndices;
	std::vector<glm::vec3> temp_vertices;
	std::vector<glm::vec2> temp_uvs;
	std::vector<glm::vec3> temp_normals;

	FILE * file = fopen(path, "r");
	if (file == NULL)
	{
		printf("Impossilbe to open the file\n");
		return false;
	}


	while (1)
	{
		char lineHeader[128];
		// read the first word of the line
		int res = fscanf(file, "%s", lineHeader);
		if (res == EOF)
			break; // EOF = End Of File. Quit the loop.

				   // else : parse lineHeader

		if (strcmp(lineHeader, "v") == 0)
		{
			glm::vec3 vertex;
			fscanf(file, "%f %f %f\n", &vertex.x, &vertex.y, &vertex.z);
			temp_vertices.push_back(vertex);
		}
		else if (strcmp(lineHeader, "vt") == 0)
		{
			glm::vec2 uv;
			fscanf(file, "%f %f\n", &uv.x, &uv.y);
			uv.y = -uv.y; // Invert V coordinate since we will only use DDS texture, which are inverted. Remove if you want to use TGA or BMP loaders.
			temp_uvs.push_back(uv);
		}
		else if (strcmp(lineHeader, "vn") == 0)
		{
			glm::vec3 normal;
			fscanf(file, "%f %f %f\n", &normal.x, &normal.y, &normal.z);
			temp_normals.push_back(normal);
		}
		else if (strcmp(lineHeader, "f") == 0)
		{

			std::string vertex1, vertex2, vertex3;
			unsigned int vertexIndex[3], uvIndex[3], normalIndex[3];
			int matches = fscanf(file, "%d/%d/%d %d/%d/%d %d/%d/%d\n", &vertexIndex[0], &uvIndex[0], &normalIndex[0], &vertexIndex[1], &uvIndex[1], &normalIndex[1], &vertexIndex[2], &uvIndex[2], &normalIndex[2]);
			if (matches != 9)
			{
				printf("File can't be read by our simple parser :-( Try exporting with other options\n");
				return false;
			}
			vertexIndices.push_back(vertexIndex[0]);
			vertexIndices.push_back(vertexIndex[1]);
			vertexIndices.push_back(vertexIndex[2]);
			uvIndices.push_back(uvIndex[0]);
			uvIndices.push_back(uvIndex[1]);
			uvIndices.push_back(uvIndex[2]);
			normalIndices.push_back(normalIndex[0]);
			normalIndices.push_back(normalIndex[1]);
			normalIndices.push_back(normalIndex[2]);
		}
		else
		{
			// Probably a comment, eat up the rest of the line
			char stupidBuffer[1000];
			fgets(stupidBuffer, 1000, file);
		}


	}
	for (unsigned int i = 0; i < vertexIndices.size(); i++)
	{

		// Get the indices of its attributes
		unsigned int vertexIndex = vertexIndices[i];
		unsigned int uvIndex = uvIndices[i];
		unsigned int normalIndex = normalIndices[i];

		// Get the attributes thanks to the index
		glm::vec3 vertex = temp_vertices[vertexIndex - 1];
		glm::vec2 uv = temp_uvs[uvIndex - 1];
		glm::vec3 normal = temp_normals[normalIndex - 1];

		// Put the attributes in buffers
		out_vertices.push_back(vertex);
		out_uvs.push_back(uv);
		out_normals.push_back(normal);

	}
	return true;
}

#define FOURCC_DXT1 0x31545844 // Equivalent to "DXT1" in ASCII
#define FOURCC_DXT3 0x33545844 // Equivalent to "DXT3" in ASCII
#define FOURCC_DXT5 0x35545844 // Equivalent to "DXT5" in ASCII



void _stringTokenize(const std::string &source, std::vector<std::string> &tokens)
{
	tokens.clear();
	std::string aux = source;
	for (unsigned int i = 0; i < aux.size(); i++) if (aux[i] == '\t' || aux[i] == '\n') aux[i] = ' ';
	std::stringstream ss(aux, std::ios::in);
	while (ss.good()) {
		std::string s;
		ss >> s;
		if (s.size() > 0) tokens.push_back(s);
	}
}

void _faceTokenize(const std::string &source, std::vector<std::string> &tokens)
{
	std::string aux = source;
	for (unsigned int i = 0; i < aux.size(); i++) if (aux[i] == '\\' || aux[i] == '/') aux[i] = ' ';
	_stringTokenize(aux, tokens);
}


bool loadOBJ(const char*path, unsigned int &vao, unsigned int& vbo, unsigned int &ibo,
	unsigned int &num_indices)
{

	std::vector<VertexFormat> vertices;
	std::vector<unsigned int> indices;
	std::ifstream file(path, std::ios::in | std::ios::binary);

	if (!file.good())
	{
		std::cout << "load obj file : " << path << " is fail!" << std::endl;
		std::terminate();
	}

	std::string line;
	std::vector<std::string> tokens, facetokens;
	std::vector<glm::vec3> positions;		positions.reserve(1000);
	std::vector<glm::vec3> normals;			normals.reserve(1000);
	std::vector<glm::vec2> texcoords;		texcoords.reserve(1000);

	while (std::getline(file, line))
	{
		_stringTokenize(line, tokens);

		if (tokens.size() == 0) continue;

		if (tokens.size() > 0 && tokens[0].at(0) == '#') continue;

		if (tokens.size() > 3 && tokens[0] == "v") positions.push_back(glm::vec3(stringToFloat(tokens[1]), stringToFloat(tokens[2]), stringToFloat(tokens[3])));

		if (tokens.size() > 3 && tokens[0] == "vn") normals.push_back(glm::vec3(stringToFloat(tokens[1]), stringToFloat(tokens[2]), stringToFloat(tokens[3])));

		if (tokens.size() > 2 && tokens[0] == "vt") texcoords.push_back(glm::vec2(stringToFloat(tokens[1]), stringToFloat(tokens[2])));

		if (tokens.size() >= 4 && tokens[0] == "f") 
		{

			// (v v/t v//n v/t/n) = (1 2 3 4)
			//1:only have vertex
			//2:have vertex and uv but no normal
			//3:vertex  normal but no uv
			//4:vertex uv and normal

			unsigned int face_format = 0;
			if (tokens[1].find("//") != std::string::npos) face_format = 3;
			_faceTokenize(tokens[1], facetokens);

			if (facetokens.size() == 3) face_format = 4;
			else 
			{
				if (facetokens.size() == 2) 
				{
					if (face_format != 3) face_format = 2;	
				}
				else 
				{
					face_format = 1; //only vertex
				}
			}

			//primul index din acest poligon
			unsigned int index_of_first_vertex_of_face = -1;

			for (unsigned int num_token = 1; num_token < tokens.size(); num_token++) 
			{
				if (tokens[num_token].at(0) == '#') break;					//comment 
				_faceTokenize(tokens[num_token], facetokens);
				if (face_format == 1) 
				{
					int p_index = stringToInt(facetokens[0]);
					if (p_index > 0) p_index -= 1;								//obj has 1...n indices
					else p_index = positions.size() + p_index;				//index negativ

					vertices.push_back(VertexFormat(positions[p_index].x, positions[p_index].y, positions[p_index].z));
				}
				else if (face_format == 2) 
				{
					// pozitie si texcoord
					int p_index = stringToInt(facetokens[0]);
					if (p_index > 0) p_index -= 1;								//obj has 1...n indices
					else p_index = positions.size() + p_index;				//index negativ

					int t_index = stringToInt(facetokens[1]);
					if (t_index > 0) t_index -= 1;								//obj has 1...n indices
					else t_index = texcoords.size() + t_index;				//index negativ

					vertices.push_back(VertexFormat(positions[p_index].x, positions[p_index].y, positions[p_index].z,
						texcoords[t_index].x, texcoords[t_index].y));
				}
				else if (face_format == 3) 
				{
					//pozitie si normala
					int p_index = stringToInt(facetokens[0]);
					if (p_index > 0) p_index -= 1;								//obj has 1...n indices
					else p_index = positions.size() + p_index;				//index negativ

					int n_index = stringToInt(facetokens[1]);
					if (n_index > 0) n_index -= 1;								//obj has 1...n indices
					else n_index = normals.size() + n_index;					//index negativ

					vertices.push_back(VertexFormat(positions[p_index].x, positions[p_index].y, positions[p_index].z, 
						normals[n_index].x, normals[n_index].y, normals[n_index].z));
				}
				else 
				{
					int p_index = stringToInt(facetokens[0]);
					if (p_index > 0) p_index -= 1;								//obj has 1...n indices
					else p_index = positions.size() + p_index;				//index negativ

					int t_index = stringToInt(facetokens[1]);
					if (t_index > 0) t_index -= 1;								//obj has 1...n indices
					else t_index = normals.size() + t_index;					//index negativ

					int n_index = stringToInt(facetokens[2]);
					if (n_index > 0) n_index -= 1;								//obj has 1...n indices
					else n_index = normals.size() + n_index;					//index negativ

					vertices.push_back(VertexFormat(positions[p_index].x, positions[p_index].y, positions[p_index].z,
						normals[n_index].x, normals[n_index].y, normals[n_index].z, 
						texcoords[t_index].x, texcoords[t_index].y));
				}

				if (num_token < 4) 
				{
					if (num_token == 1) index_of_first_vertex_of_face = vertices.size() - 1;
					//doar triunghiuri f 0 1 2 3 (4 indecsi, primul e ocupat de f)
					indices.push_back(vertices.size() - 1);
				}
				else 
				{
					//polygon => triunghi cu ultimul predecesor vertexului nou adaugat si 0 relativ la vertecsi poligon(independent clockwise)
					indices.push_back(index_of_first_vertex_of_face);
					indices.push_back(vertices.size() - 2);
					indices.push_back(vertices.size() - 1);
				}
			}//end for
		}//end face

	}//end while


	unsigned int gl_vertex_array_object, gl_vertex_buffer_object, gl_index_buffer_object;

	//vertex array object -> un obiect ce reprezinta un container pentru starea de desenare
	glGenVertexArrays(1, &gl_vertex_array_object);
	glBindVertexArray(gl_vertex_array_object);

	//vertex buffer object -> un obiect in care tinem vertecsii
	glGenBuffers(1, &gl_vertex_buffer_object);
	glBindBuffer(GL_ARRAY_BUFFER, gl_vertex_buffer_object);
	glBufferData(GL_ARRAY_BUFFER, vertices.size()*sizeof(VertexFormat), &vertices[0], GL_STATIC_DRAW);

	//index buffer object -> un obiect in care tinem indecsii
	glGenBuffers(1, &gl_index_buffer_object);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, gl_index_buffer_object);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size()*sizeof(unsigned int), &indices[0], GL_STATIC_DRAW);
	
	vao = gl_vertex_array_object;
	vbo = gl_vertex_buffer_object;
	ibo = gl_index_buffer_object;
	num_indices = indices.size();

	return true;
}


unsigned int loadDDS(const char * imagepath)
{

	unsigned char header[124];

	FILE *fp;

	/* try to open the file */
	fp = fopen(imagepath, "rb");
	if (fp == NULL) {
		printf("%s could not be opened. Are you in the right directory ? Don't forget to read the FAQ !\n", imagepath); getchar();
		return 0;
	}

	/* verify the type of file */
	char filecode[4];
	fread(filecode, 1, 4, fp);
	if (strncmp(filecode, "DDS ", 4) != 0) {
		fclose(fp);
		return 0;
	}

	/* get the surface desc */
	fread(&header, 124, 1, fp);

	unsigned int height = *(unsigned int*)&(header[8]);
	unsigned int width = *(unsigned int*)&(header[12]);
	unsigned int linearSize = *(unsigned int*)&(header[16]);
	unsigned int mipMapCount = *(unsigned int*)&(header[24]);
	unsigned int fourCC = *(unsigned int*)&(header[80]);


	unsigned char * buffer;
	unsigned int bufsize;
	/* how big is it going to be including all mipmaps? */
	bufsize = mipMapCount > 1 ? linearSize * 2 : linearSize;
	buffer = (unsigned char*)malloc(bufsize * sizeof(unsigned char));
	fread(buffer, 1, bufsize, fp);
	/* close the file pointer */
	fclose(fp);

	unsigned int components = (fourCC == FOURCC_DXT1) ? 3 : 4;
	unsigned int format;
	switch (fourCC)
	{
	case FOURCC_DXT1:
		format = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
		break;
	case FOURCC_DXT3:
		format = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
		break;
	case FOURCC_DXT5:
		format = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
		break;
	default:
		free(buffer);
		return 0;
	}

	// Create one OpenGL texture
	GLuint textureID;
	glGenTextures(1, &textureID);

	// "Bind" the newly created texture : all future texture functions will modify this texture
	glBindTexture(GL_TEXTURE_2D, textureID);
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

	unsigned int blockSize = (format == GL_COMPRESSED_RGBA_S3TC_DXT1_EXT) ? 8 : 16;
	unsigned int offset = 0;

	/* load the mipmaps */
	for (unsigned int level = 0; level < mipMapCount && (width || height); ++level)
	{
		unsigned int size = ((width + 3) / 4)*((height + 3) / 4)*blockSize;
		glCompressedTexImage2D(GL_TEXTURE_2D, level, format, width, height,
			0, size, buffer + offset);

		offset += size;
		width /= 2;
		height /= 2;

		// Deal with Non-Power-Of-Two textures. This code is not included in the webpage to reduce clutter.
		if (width < 1) width = 1;
		if (height < 1) height = 1;

	}

	free(buffer);

	return textureID;


}

unsigned int soil_load_DDS(const char* imagePath)
{
	GLuint tex_2d = SOIL_direct_load_DDS(imagePath, SOIL_CREATE_NEW_ID, SOIL_FLAG_MIPMAPS | SOIL_FLAG_TEXTURE_REPEATS, 0);

	if (0 == tex_2d)
	{
		printf("SOIL loading DDS error: '%s' \n", SOIL_last_result());
	}

	return tex_2d;
}

unsigned int loadBMP_custom(const char*imagePath)
{
	struct bmpHeader
	{
		unsigned char type[2];
		int f_lenght;
		short rezerved1;
		short rezerved2;
		int offBits;
	};
	struct header_info
	{
		int size;
		int width;
		int height;
		short planes;
		short bitCount;
		int compresion;
		int sizeImage;
		int xPelsPerMeter;
		int yPelsPerMeter;
		int clrUsed;
		int clrImportant;
	};

	unsigned char header[54]; // Each BMP file begins by a 54-bytes header
	unsigned int dataPos;       // Position in the file where the actual data begins
	unsigned int width, height;
	unsigned int imageSize;     // = width*height*3
	unsigned char* data;

	FILE * file = fopen(imagePath, "rb");
	if (!file)
	{
		printf("Image could not be opened\n"); return 0;
	}
	if (fread(header, 1, 54, file) != 54)
	{
		printf("Not a correct BMP file\n");
		return false;
	}

	if (header[0] != 'B' || header[1] != 'M') {
		printf("Not a correct BMP file\n");
		return 0;
	}

	// Read ints from the byte array
	dataPos = *(int*)&(header[0x0A]);
	imageSize = *(int*)&(header[0x22]);
	width = *(int*)&(header[0x12]);
	height = *(int*)&(header[0x16]);

	if (imageSize == 0)    imageSize = width*height * 3; // 3 : one byte for each Red, Green and Blue component
	if (dataPos == 0)      dataPos = 54; // The BMP header is done that way

	data = new unsigned char[imageSize];
	fread(data, 1, imageSize, file);
	fclose(file);

	//create opengl texture
	GLuint textureID;
	glGenTextures(1, &textureID);

	// "Bind" the newly created texture : all future texture functions will modify this texture
	glBindTexture(GL_TEXTURE_2D, textureID);

	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_BGR, GL_UNSIGNED_BYTE, data);
	//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glGenerateMipmap(GL_TEXTURE_2D);

	return textureID;
}

<<<<<<< HEAD
=======
Mesh processMesh(const aiMesh* mesh, const aiScene* scene)
{
	std::vector<VertexFormat> vertexs;
	std::vector<unsigned int >indices;
	 // Walk through each of the mesh's vertices
	 for(GLuint i = 0; i < mesh->mNumVertices; i++)
	 {
		 
            Vec3f Position; // We declare a placeholder vector since assimp uses its own vector class that doesn't directly convert to glm's vec3 class so we transfer the data to this placeholder glm::vec3 first.
            Vec3f normal;
			Vec2f tex;
			Vec3f tb;
			
			// Positions
            Position.x = mesh->mVertices[i].x;
            Position.y = mesh->mVertices[i].y;
            Position.z = mesh->mVertices[i].z;
            
            // Normals
            normal.x = mesh->mNormals[i].x;
            normal.y = mesh->mNormals[i].y;
            normal.z = mesh->mNormals[i].z;

            // Texture Coordinates
            if(mesh->mTextureCoords[0]) // Does the mesh contain texture coordinates?
            {
                // A vertex can contain up to 8 different texture coordinates. We thus make the assumption that we won't 
                // use models where a vertex can have multiple texture coordinates so we always take the first set (0).
                tex.x = mesh->mTextureCoords[0][i].x; 
                tex.y = mesh->mTextureCoords[0][i].y;
            }
            else
                tex = glm::vec2(0.0f, 0.0f);
            // Tangent
			Vec3f tangent;
            tangent.x = mesh->mTangents[i].x;
            tangent.y = mesh->mTangents[i].y;
            tangent.z = mesh->mTangents[i].z;

            Vec3f bitangent;
            bitangent.x = mesh->mBitangents[i].x;
            bitangent.y = mesh->mBitangents[i].y;
            bitangent.z = mesh->mBitangents[i].z;

            vertexs.push_back(
				VertexFormat(
				Position.x,Position.y,Position.z,
				normal.x,normal.y,normal.z,
				tex.x,tex.y,
				tangent.x,tangent.y,tangent.z,
				bitangent.x,bitangent.y,bitangent.z));
	 }
	 
	for(GLuint i = 0; i < mesh->mNumFaces; i++)
        {
            aiFace face = mesh->mFaces[i];
            // Retrieve all indices of the face and store them in the indices vector
            for(GLuint j = 0; j < face.mNumIndices; j++)
                indices.push_back(face.mIndices[j]);
        }
	std::vector<TextureR> texs;
	return Mesh(vertexs,indices,texs);
}

void processNode(const aiNode* node, const aiScene* scene,std::vector<Mesh>&meshs)
{
	// Process each mesh located at the current node
        for(GLuint i = 0; i < node->mNumMeshes; i++)
        {
            // The node object only contains indices to index the actual objects in the scene. 
            // The scene contains all the data, node is just to keep stuff organized (like relations between nodes).
            const aiMesh* mesh = scene->mMeshes[node->mMeshes[i]]; 
            meshs.push_back(processMesh(mesh, scene));			
        }
        // After we've processed all of the meshes (if any) we then recursively process each of the children nodes
        for(GLuint i = 0; i < node->mNumChildren; i++)
        {
            processNode(node->mChildren[i], scene,meshs);
        }
}

bool loadObjByAssimp(const char*fileName,std::vector<Mesh>&meshs)
{
	// Create an instance of the Importer class  
	Assimp::Importer importer;
	
	const aiScene* scene = importer.ReadFile(fileName, aiProcess_Triangulate | aiProcess_FlipUVs | aiProcess_CalcTangentSpace);
    if(!scene || scene->mFlags == AI_SCENE_FLAGS_INCOMPLETE || !scene->mRootNode) // if is Not Zero
    {
		char buffer[128];
		sprintf(buffer,"ERROR::ASSIMP:: %s \n",importer.GetErrorString());
		Log::Instance()->printMessage(buffer);
        return false;
    }
	
	processNode(scene->mRootNode,scene,meshs);
	
	return true;
}
>>>>>>> 4e4ae7d24c1803a9d11c7f685de0451ff4b15962
